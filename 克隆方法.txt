git clone 网址（仓库网址）//克隆文件
git status//查看当前状态
git add .//添加所有文件到缓存区
git commit -m '说明'
git push origin master//压缩到主分区

git branch test//创建分支
git checkout test //切换分支

{//合并分支
https://www.cnblogs.com/NotEnough/p/9435966.html；

    第一步： git branch brh（分支名称） //创建分支

    3、切换分支
    第二步： git checkout brh //切换到分支brh
    
    第三步： git add .//添加所有文件

    第四步： git commit -m “xxx” //描述

    第五步： git push -u origin brh 《=====》 git push origin brh //将文件压入分支
    
    第六步： git checkout master //切换到主分区
    
    第七步： git merge brh //分支合并

    第八步： git push -u origin master ////将文件压入主分区


    第九步： git branch -d brh //删除子分支


    第十步：  git push origin --delete brh //删除远程子分支（git push origin :feature（分支名称））
}


git回退命令reset

git log ：查看日志（历史更新）

git reset --hard commit_id     //退到/进到 指定commit的sha码 commit_id:239afed0857cc2e77c17c01014077808619af64d

$ git reset --hard commit_id(commit字符)

$ git push origin HEAD --force


git status : 比较本地与git仓库项目区别；

git add . :将所有文件增加至本地git的缓冲区,注意.和add中间有个空格；

git commit -m "<提交说明>" ：将修改的代码提交至本地仓库，提交说明有双引号；

git push ：将本地仓库代码传至线上；

git pull : 将线上的代码更新到本地；

git checkout  <分支名称> ：将编码切换到这个分支下；

git merge origin/<分支名称> : 将分支名称与主分支合并。

从本地向线上提交项目：git add . => git commit -m "提交说明" => git push

将子分支合并到主分支：git checkout master => git merge origin/<分支名称> => git push


场景：甲和乙在修改A分支代码。

甲修改了一部分，在本地，未提交

乙修改了一部分代码，提交到了远程

甲如何更新到乙修改的代码，同时本地修改保留？

 

1、执行git stash 暂存这些变更

2、git pull origin 拉取远程代码

3、git stash pop 重新应用储藏的变更

4、再次提交自己的代码到远程 git commit -a -m "jhaha"

git push origin master




小程序正则匹配：pwd为input输入值
1：pwd.replace(/[^a-zA-Z]/g,'')//只能输入英文
2.pwd.replace(/[^a-za-z0-9u4e00-u9fa5@.]/g,''只能输入中文、英文、数字、@符号和.符号
3.pwd.replace(/[d]/g,'')只能输入字母和汉字
4.pwd.replace(/[^\w\/]/ig,'')只能输入英文字母和数字,不能输入中文
5.pwd.replace(/[^\w\.\/]/ig,'')只能输入英文字母和数字,不能输入中文




npm/yarn常用指令
yarn:
yarn global bin                            //获取yarn全局bin位置
yarn global dir                            //获取yarn全局安装位置
yarn config set global-folder <path>       //修改全局包存储位置
yarn config set cache-folder <path>        //修改缓存位置
yarn cache clean             // 删除缓存
yarn global list --depth=0   //查看yarn全局安装过的包
yarn global add <package>    //全局安装
yarn                         //安装所有依赖
yarn add <package>@<version> //安装指定版本
yarn add <package>           //安装最新版本
yarn remove <package>        //删除包，会更新package.json和yarn.lock
yarn upgrade                 //更新包
yarn cache clean --all       //‌ 清除Yarn缓存
# 获取Yarn全局包存储路径并删除
yarn global dir
rmdir /s /q "C:\Users\%USERNAME%\AppData\Local\Yarn"

npm:
npm config set prefix        // 手动配置了全局模块的安装位置
npm config set cache         // 设置缓存路径
npm prefix -g                // 查看npm包全局安装位置
npm list -g --depth 0        //查看npm全局安装过的包
npm install <package> -g     //全局安装
npm install                  //安装项目全局依赖
npm install <package>@<version> //安装指定版本
npm i <package>@latest       //安装最新版本
npm uninstall -g <package>   //删除全局包
npm uninstall <package>      //删除node_modules目录下的包



















